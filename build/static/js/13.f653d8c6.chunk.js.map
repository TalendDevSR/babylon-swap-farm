{"version":3,"sources":["components/TranslatedText/TranslatedText.tsx","views/Farms/components/FarmFinder/index.tsx","components/Modal/index.tsx","views/Farms/FarmFinder.tsx","views/Farms/components/FarmFinder/CurrencySearchModal.tsx"],"names":["TranslatedText","translationId","children","TranslateString","useI18n","Column","Card","styled","div","ColumnCenter","AutoColumn","gap","justify","Tabs","Row","Box","align","padding","border","borderRadius","RowBetween","StyledArrowLeft","ArrowLeft","theme","colors","text","ActiveText","BodyWrapper","FindPoolTabs","style","to","AnimatedDialogOverlay","animated","DialogOverlay","StyledDialogOverlay","AnimatedDialogContent","DialogContent","StyledDialogContent","minHeight","maxHeight","mobile","isOpen","rest","attrs","transparentize","css","mediaQueries","lg","sm","Modal","onDismiss","initialFocusRef","fadeTransition","useTransition","config","duration","from","opacity","enter","leave","map","item","key","props","isMobile","tabIndex","Fields","Heading","SearchInput","input","textDisabled","CurrencySearchModal","onCurrencySelect","selectedCurrency","otherSelectedCurrency","useState","searchQuery","SetSearchQuery","inputRef","useRef","handleSearchToken","useCallback","tokenAddress","a","fetchToken","currency","NotificationManager","error","handleEnter","e","width","flex","color","onClick","type","id","placeholder","value","ref","onChange","target","onKeyDown","PoolFinder","history","useHistory","showSearch","setShowSearch","TOKEN1","activeField","setActiveField","currency0","setCurrency0","currency1","setCurrency1","handleCurrencySelect","TOKEN0","handleFindLp","Error","fetchLPToken","address","lpAddress","push","handleSearchDismiss","Page","as","size","mb","textAlign","endIcon","fullWidth","symbol","justifyItems","backgroundColor","showCommonBases","undefined"],"mappings":"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","file":"static/js/13.f653d8c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface TranslatedTextProps {\r\n  translationId: number\r\n  children: string\r\n}\r\n\r\nconst TranslatedText = ({ translationId, children }: TranslatedTextProps) => {\r\n  const TranslateString = useI18n()\r\n  return <>{TranslateString(translationId, children)}</>\r\n}\r\n\r\nexport default TranslatedText\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { NavLink, Link as HistoryLink } from 'react-router-dom'\r\nimport { Box } from 'rebass/styled-components'\r\nimport { ArrowLeft } from 'react-feather'\r\n\r\nimport { Card } from '@pancakeswap-libs/uikit'\r\n\r\nexport default Card\r\n\r\nexport const LightCard = styled(Card)`\r\n  border: 1px solid #D0B49F;\r\n`\r\n\r\n// Column\r\nexport const Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\nexport const ColumnCenter = styled(Column)`\r\n  width: 100%;\r\n  align-items: center;\r\n`\r\n\r\nexport const AutoColumn = styled.div<{\r\n  gap?: 'sm' | 'md' | 'lg' | string\r\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\r\n}>`\r\n  display: grid;\r\n  grid-auto-rows: auto;\r\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\r\n  justify-items: ${({ justify }) => justify && justify};\r\n`\r\n\r\n// find tab\r\n\r\n\r\nconst Tabs = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  border-radius: 3rem;\r\n  justify-content: space-evenly;\r\n`\r\n\r\nexport const Row = styled(Box)<{ align?: string; padding?: string; border?: string; borderRadius?: string }>`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 0;\r\n  align-items: ${({ align }) => (align || 'center')};\r\n  padding: ${({ padding }) => padding};\r\n  border: ${({ border }) => border};\r\n  border-radius: ${({ borderRadius }) => borderRadius};\r\n`\r\n\r\nexport const RowBetween = styled(Row)`\r\n  justify-content: space-between;\r\n`\r\n\r\nconst StyledArrowLeft = styled(ArrowLeft)`\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nconst ActiveText = styled.div`\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n`\r\n\r\nexport const BodyWrapper = styled(Card)`\r\n  margin: auto;\r\n  position: relative;\r\n  max-width: 436px;\r\n  width: 100%;\r\n  z-index: 5;\r\n  border-radius:20px;\r\n`\r\n\r\nexport function FindPoolTabs() {\r\n    return (\r\n      <Tabs>\r\n        <RowBetween style={{ padding: '1rem' }}>\r\n          <HistoryLink to=\"/farms\">\r\n            <StyledArrowLeft />\r\n          </HistoryLink>\r\n          <ActiveText>Import Pool</ActiveText>\r\n          <div></div>\r\n          </RowBetween>\r\n      </Tabs>\r\n    )\r\n  }","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { animated, useTransition } from 'react-spring'\r\nimport { DialogOverlay, DialogContent } from '@reach/dialog'\r\nimport { isMobile } from 'react-device-detect'\r\nimport '@reach/dialog/styles.css'\r\nimport { transparentize } from 'polished'\r\n\r\nconst AnimatedDialogOverlay = animated(DialogOverlay)\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst StyledDialogOverlay = styled(AnimatedDialogOverlay)`\r\n  &[data-reach-dialog-overlay] {\r\n    z-index: 2;\r\n    background-color: transparent;\r\n    overflow: hidden;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n  }\r\n`\r\n\r\nconst AnimatedDialogContent = animated(DialogContent)\r\n// destructure to not pass custom props to Dialog DOM element\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst StyledDialogContent = styled(({ minHeight, maxHeight, mobile, isOpen, ...rest }) => (\r\n  <AnimatedDialogContent {...rest} />\r\n)).attrs({\r\n  'aria-label': 'dialog',\r\n})`\r\n  &[data-reach-dialog-content] {\r\n    margin: 0 0 2rem 0;\r\n    border: 1px solid #D0B49F;\r\n    background-color: #090805;\r\n    border-radius:20px;\r\n    box-shadow: 0 4px 8px 0 ${transparentize(0.95, '#191326')};\r\n    padding: 0px;\r\n    width: 80%;\r\n    overflow: hidden;\r\n    align-self: ${({ mobile }) => (mobile ? 'flex-end' : 'center')};\r\n\r\n    max-width: 420px;\r\n    ${({ maxHeight }) =>\r\n      maxHeight &&\r\n      css`\r\n        max-height: ${maxHeight}vh;\r\n      `}\r\n    ${({ minHeight }) =>\r\n      minHeight &&\r\n      css`\r\n        min-height: ${minHeight}vh;\r\n      `}\r\n    display: flex;\r\n\r\n    ${({ theme }) => theme.mediaQueries.lg} {\r\n      width: 65vw;\r\n    }\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      width: 85vw;\r\n    }\r\n  }\r\n`\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  minHeight?: number | false\r\n  maxHeight?: number\r\n  initialFocusRef?: React.RefObject<any>\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport default function Modal({\r\n  isOpen,\r\n  onDismiss,\r\n  minHeight = false,\r\n  maxHeight = 50,\r\n  initialFocusRef,\r\n  children,\r\n}: ModalProps) {\r\n  const fadeTransition = useTransition(isOpen, null, {\r\n    config: { duration: 200 },\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {fadeTransition.map(\r\n        ({ item, key, props }) =>\r\n          item && (\r\n            <StyledDialogOverlay key={key} style={props} onDismiss={onDismiss} initialFocusRef={initialFocusRef}>\r\n              <StyledDialogContent\r\n                aria-label=\"dialog content\"\r\n                minHeight={minHeight}\r\n                maxHeight={maxHeight}\r\n                mobile={isMobile}\r\n              >\r\n                {/* prevents the automatic focusing of inputs on mobile by the reach dialog */}\r\n                {/* eslint-disable */}\r\n                {!initialFocusRef && isMobile ? <div tabIndex={1} /> : null}\r\n                {/* eslint-enable */}\r\n                {children}\r\n              </StyledDialogContent>\r\n            </StyledDialogOverlay>\r\n          )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, ChevronDownIcon, AddIcon, CardBody, Text, Heading } from '@pancakeswap-libs/uikit'\r\nimport { NotificationManager } from 'react-notifications';\r\nimport TranslatedText from 'components/TranslatedText'\r\nimport Page from 'components/layout/Page'\r\nimport { LightCard, AutoColumn, ColumnCenter, FindPoolTabs, BodyWrapper } from './components/FarmFinder'\r\nimport CurrencySearchModal, { Currency } from './components/FarmFinder/CurrencySearchModal'\r\nimport { fetchLPToken } from '../../state/farms/fetchFarms'\r\n\r\n\r\nenum Fields {\r\n    TOKEN0 = 0,\r\n    TOKEN1 = 1\r\n}\r\n\r\nexport default function PoolFinder() {\r\n    const history = useHistory();\r\n\r\n    const [showSearch, setShowSearch] = useState<boolean>(false)\r\n    const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\r\n\r\n    const [currency0, setCurrency0] = useState<Currency | null>(null)\r\n    const [currency1, setCurrency1] = useState<Currency | null>(null)\r\n\r\n    const handleCurrencySelect = useCallback(\r\n        (currency: Currency) => {\r\n            if (activeField === Fields.TOKEN0) {\r\n                setCurrency0(currency)\r\n            } else {\r\n                setCurrency1(currency)\r\n            }\r\n        },\r\n        [activeField]\r\n    )\r\n\r\n    const handleFindLp = useCallback(async () => {\r\n        try {\r\n            if (!currency0 || !currency1) throw new Error(\"Invalid token\");\r\n            const lpAddress = await fetchLPToken(currency0.address, currency1.address);\r\n            history.push(`/farms?lp=${lpAddress}`)\r\n        } catch (err) {\r\n            NotificationManager.error(\"invalid address\", 'Find LP failed');\r\n        }\r\n    }, [fetchLPToken, currency0, currency1])\r\n\r\n    const handleSearchDismiss = useCallback(() => {\r\n        setShowSearch(false)\r\n    }, [setShowSearch])\r\n\r\n    return (\r\n        <Page>\r\n            <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n                Stake LP Tokens To Earn Tokens\r\n            </Heading>\r\n            <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n                Any Pair Created on BabylonSwap has a Farm where you can Earn Money\r\n            </Heading>\r\n            <BodyWrapper>\r\n                <FindPoolTabs />\r\n                <CardBody >\r\n                    <AutoColumn gap=\"md\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                setShowSearch(true)\r\n                                setActiveField(Fields.TOKEN0)\r\n                            }}\r\n                            endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\r\n                            fullWidth\r\n                        >\r\n                            {currency0 ? currency0.symbol : <TranslatedText translationId={82}>Select a Token</TranslatedText>}\r\n                        </Button>\r\n\r\n                        <ColumnCenter>\r\n                            <AddIcon color=\"textSubtle\" />\r\n                        </ColumnCenter>\r\n\r\n                        <Button\r\n                            onClick={() => {\r\n                                setShowSearch(true)\r\n                                setActiveField(Fields.TOKEN1)\r\n                            }}\r\n                            endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\r\n                            fullWidth\r\n                        >\r\n                            {currency1 ? currency1.symbol : <TranslatedText translationId={82}>Select a Token</TranslatedText>}\r\n                        </Button>\r\n\r\n                        <ColumnCenter\r\n                            style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\r\n                        >\r\n                            <Button onClick={handleFindLp}>\r\n                                Find LP\r\n                            </Button>\r\n                        </ColumnCenter>\r\n                    </AutoColumn>\r\n\r\n                    <CurrencySearchModal\r\n                        isOpen={showSearch}\r\n                        onCurrencySelect={handleCurrencySelect}\r\n                        onDismiss={handleSearchDismiss}\r\n                        showCommonBases\r\n                        selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n                    />\r\n                </CardBody>\r\n            </BodyWrapper>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { KeyboardEvent, RefObject, useCallback, useEffect, useState, useRef } from 'react'\r\nimport Modal from 'components/Modal'\r\nimport { Text, CloseIcon, Button } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { fetchToken } from 'state/farms/fetchFarms'\r\nimport { Row, Column, ColumnCenter, RowBetween } from \"./index\"\r\n\r\n\r\nexport class Currency {\r\n    readonly decimals: number;\r\n\r\n    readonly symbol?: string;\r\n\r\n    readonly name?: string;\r\n\r\n    readonly address?: string;\r\n}\r\n\r\nconst Heading = styled.div`\r\n  padding: 10px;\r\n`\r\nconst SearchInput = styled.input`\r\n  position: relative;\r\n  display: flex;\r\n  padding: 16px;\r\n  align-items: center;\r\n  width: 100%;\r\n  white-space: nowrap;\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 20px;\r\n  color: white;\r\n  border-style: solid;\r\n  border: 1px solid #D0B49F;\r\n  -webkit-appearance: none;\r\n\r\n  font-size: 18px;\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n  transition: border 100ms;\r\n  :focus {\r\n    border: 1px solid #D0B49F;\r\n    outline: none;\r\n  }\r\n`\r\n\r\ninterface CurrencySearchModalProps {\r\n    isOpen: boolean\r\n    onDismiss: () => void\r\n    selectedCurrency?: Currency | null\r\n    onCurrencySelect: (currency: Currency) => void\r\n    otherSelectedCurrency?: Currency | null\r\n    // eslint-disable-next-line react/no-unused-prop-types\r\n    showCommonBases?: boolean\r\n}\r\n\r\nexport default function CurrencySearchModal({\r\n    isOpen,\r\n    onDismiss,\r\n    onCurrencySelect,\r\n    selectedCurrency,\r\n    otherSelectedCurrency,\r\n}: CurrencySearchModalProps) {\r\n    const [listView, setListView] = useState<boolean>(false);\r\n    const [searchQuery, SetSearchQuery] = useState(\"\");\r\n    const inputRef = useRef<HTMLInputElement>()\r\n\r\n    const handleSearchToken = useCallback(async (tokenAddress) => {\r\n        let currency;\r\n        try {\r\n            currency = await fetchToken(tokenAddress);\r\n            onCurrencySelect(currency)\r\n            onDismiss()\r\n        } catch (err) {\r\n            NotificationManager.error(\"invalid address\", 'Find Token failed');\r\n        }\r\n    }, [onCurrencySelect])\r\n\r\n    const handleEnter = useCallback(\r\n        (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                handleSearchToken(searchQuery);\r\n            }\r\n        },\r\n        [handleSearchToken]\r\n    )\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onDismiss={onDismiss} maxHeight={90} minHeight={0}>\r\n            <Column style={{ width: '100%', flex: '1 1', padding: \"10px\" }}>\r\n                <Heading>\r\n                    <RowBetween>\r\n                        <Text color=\"white\">\r\n                            Enter Token Contract Address\r\n                        </Text>\r\n                        <CloseIcon onClick={onDismiss} />\r\n                    </RowBetween>\r\n                </Heading>\r\n                <SearchInput\r\n                    type=\"text\"\r\n                    id=\"token-search-input\"\r\n                    placeholder='Enter Token Contract Address'\r\n                    value={searchQuery}\r\n                    ref={inputRef as RefObject<HTMLInputElement>}\r\n                    onChange={(e) => { SetSearchQuery(e.target.value) }}\r\n                    onKeyDown={handleEnter}\r\n                />\r\n                <Heading>\r\n                    <ColumnCenter>\r\n                        <Button onClick={() => { handleSearchToken(searchQuery) }}>\r\n                            Find Token\r\n                        </Button>\r\n                    </ColumnCenter>\r\n                </Heading>\r\n            </Column>\r\n        </Modal>\r\n    )\r\n}\r\n"],"sourceRoot":""}