{"version":3,"sources":["state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/web3.ts","contexts/Localisation/translationsContext.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","state/farms/fetchFarms.ts","utils/multicall.ts","config/constants/types.ts","utils/addressHelpers.ts","config/constants/contracts.ts","config/constants/pools.ts","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["fetchFarmUserAllowances","account","a","masterChefAdress","getMasterChefAddress","calls","farmsConfig","map","farm","address","isTokenOnly","tokenAddresses","CHAIN_ID","lpAddresses","name","params","multicall","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","BigNumber","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","masterchefABI","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","initialState","data","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","newFarmsData","filter","findIndex","concat","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","fetchFarms","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","earnings","addFarmDatas","addFarms","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","contractOptions","eth","Contract","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","err","usePriceBnbBusd","tokenPriceVsQuote","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","QuoteToken","BNB","times","CAKE","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","variableRegex","getTranslation","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","Container","styled","div","theme","mediaQueries","sm","Page","lg","fetchToken","tokenAddress","erc20","symbol","decimals","fetchLPToken","tokenAddress1","tokenAddress2","getFactoryAddress","factotyABI","lpAddress","toLowerCase","Error","fetchFarm","farmConfig","lpAdress","quoteTokenAdresses","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","pow","tokenSymbol","BUSD","lpTokenRatio","quoteTokenAmount","comparedTo","info","depositFeeBP","Promise","all","fetchFarmIndex","LPAbi","token0","token1","symbol1","symbol2","lpIndex","String","Number","lpSymbol","web3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","PoolCategory","getCakeAddress","addresses","cake","chainId","masterChef","factory","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","busd","pools","risk","contracts","isNative","_farm","push","nonBnbPools","poolsConfig","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","useTheme","StyledThemeCopntext","config","label","icon","items","href","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","toNumber","links","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","useRef","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","Farms","lazy","FarmFinder","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","getBlockNumber","blockNumber","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01e83b77.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n    const masterChefAdress = getMasterChefAddress()\r\n    const calls = farmsConfig.map((farm) => {\r\n        const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n        return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n    })\r\n\r\n    const rawLpAllowances = await multicall(erc20ABI, calls)\r\n    const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n        return new BigNumber(lpBalance).toJSON()\r\n    })\r\n    return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n    const calls = farmsConfig.map((farm) => {\r\n        const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n        return {\r\n            address: lpContractAddress,\r\n            name: 'balanceOf',\r\n            params: [account],\r\n        }\r\n    })\r\n\r\n    const rawTokenBalances = await multicall(erc20ABI, calls)\r\n    const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n        return new BigNumber(tokenBalance).toJSON()\r\n    })\r\n    return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n    const masterChefAdress = getMasterChefAddress()\r\n    const calls = farmsConfig.map((farm) => {\r\n        return {\r\n            address: masterChefAdress,\r\n            name: 'userInfo',\r\n            params: [farm.pid, account],\r\n        }\r\n    })\r\n\r\n    const rawStakedBalances = await multicall(masterchefABI, calls)\r\n    const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n        return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n    })\r\n    return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n    //   const masterChefAdress = getMasterChefAddress()\r\n\r\n    //   const calls = farmsConfig.map((farm) => {\r\n    //     return {\r\n    //       address: masterChefAdress,\r\n    //       name: 'pendingEgg',\r\n    //       params: [farm.pid, account],\r\n    //     }\r\n    //   })\r\n\r\n    //   const rawEarnings = await multicall(masterchefABI, calls)\r\n    //   const parsedEarnings = rawEarnings.map((earnings) => {\r\n    //     return new BigNumber(earnings).toJSON()\r\n    //   })\r\n    return 0; //  parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig, { addFarms } from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n    fetchFarmUserEarnings,\r\n    fetchFarmUserAllowances,\r\n    fetchFarmUserTokenBalances,\r\n    fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n    name: 'Farms',\r\n    initialState,\r\n    reducers: {\r\n        setFarmsPublicData: (state, action) => {\r\n            const liveFarmsData: Farm[] = action.payload\r\n            // update data\r\n            state.data = state.data.map((farm) => {\r\n                const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n                return { ...farm, ...liveFarmData }\r\n            })\r\n            // add data\r\n            const newFarmsData: Farm[] = liveFarmsData.filter((farm) => {\r\n                return state.data.findIndex((f) => f.pid === farm.pid) === -1\r\n            })\r\n            state.data = state.data.concat(newFarmsData);\r\n        },\r\n        setFarmUserData: (state, action) => {\r\n            const { arrayOfUserDataObjects } = action.payload\r\n            arrayOfUserDataObjects.forEach((userDataEl) => {\r\n                const { index } = userDataEl\r\n                state.data[index] = { ...state.data[index], userData: userDataEl }\r\n            })\r\n        },\r\n    },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n    const farms = await fetchFarms()\r\n    dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n    const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n        return {\r\n            index,\r\n            allowance: userFarmAllowances[index],\r\n            tokenBalance: userFarmTokenBalances[index],\r\n            stakedBalance: userStakedBalances[index],\r\n            earnings: userFarmEarnings[index],\r\n        }\r\n    })\r\n\r\n    dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport const addFarmDatas = (farm: any) => async (dispatch) => {\r\n    const isAdded = addFarms(farm);\r\n    if (isAdded) dispatch(setFarmsPublicData(farmsConfig))\r\n}\r\nexport default farmsSlice.reducer\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n    const dispatch = useDispatch()\r\n    const { slowRefresh } = useRefresh()\r\n    useEffect(() => {\r\n        dispatch(fetchFarmsPublicDataAsync())\r\n        // dispatch(fetchPoolsPublicDataAsync())\r\n    }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n    const farms = useSelector((state: State) => state.farms.data)\r\n    return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n    const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n    return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n    const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n    return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n    try {\r\n        const farm = useFarmFromPid(pid)\r\n\r\n        return {\r\n            allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n            tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n            stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n            earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n        }\r\n    } catch (err) {\r\n        return {\r\n            allowance: new BigNumber(0),\r\n            tokenBalance: new BigNumber(0),\r\n            stakedBalance: new BigNumber(0),\r\n            earnings: new BigNumber(0),\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n    const { fastRefresh } = useRefresh()\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (account) {\r\n            dispatch(fetchPoolsUserDataAsync(account))\r\n        }\r\n    }, [account, dispatch, fastRefresh])\r\n\r\n    const pools = useSelector((state: State) => state.pools.data)\r\n    return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n    const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n    return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n    const pid = 3 // BUSD-BNB LP\r\n    const farm = useFarmFromPid(pid)\r\n    return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n    // const pid = 1 // CAKE-BNB LP\r\n    // const bnbPriceUSD = usePriceBnbBusd()\r\n    // const farm = useFarmFromPid(pid)\r\n    // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n    const pid = 2; // XBT-BUSD LP\r\n    const farm = useFarmFromPid(pid);\r\n    return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n    const farms = useFarms();\r\n    const bnbPrice = usePriceBnbBusd();\r\n    const cakePrice = usePriceCakeBusd();\r\n    let value = new BigNumber(0);\r\n    for (let i = 0; i < farms.length; i++) {\r\n        const farm = farms[i]\r\n        if (farm.lpTotalInQuoteToken) {\r\n            let val;\r\n            if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n                val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n            } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n                val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n            } else {\r\n                val = (farm.lpTotalInQuoteToken);\r\n            }\r\n            value = value.plus(val);\r\n        }\r\n    }\r\n    return value;\r\n}","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync ,addFarmDatas} from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport factotyABI from 'config/abi/factory.json'\r\nimport LPAbi from 'config/abi/lp.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress, getFactoryAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchToken = async (tokenAddress) => {\r\n    const calls = [\r\n        {\r\n            address: tokenAddress,\r\n            name: 'name'\r\n        },\r\n        {\r\n            address: tokenAddress,\r\n            name: 'symbol'\r\n        },\r\n        {\r\n            address: tokenAddress,\r\n            name: 'decimals'\r\n        },\r\n    ]\r\n\r\n    const [\r\n        name,\r\n        symbol,\r\n        decimals\r\n    ] = await multicall(erc20, calls)\r\n\r\n    return {\r\n        name, symbol, decimals, address: tokenAddress\r\n    }\r\n}\r\n\r\nexport const fetchLPToken = async (tokenAddress1, tokenAddress2) => {\r\n\r\n    const calls = [\r\n        {\r\n            address: getFactoryAddress(),\r\n            name: 'getPair',\r\n            params: [tokenAddress1, tokenAddress2],\r\n        }\r\n    ]\r\n\r\n    const [\r\n        lpAddress\r\n    ] = await multicall(factotyABI, calls)\r\n\r\n    if (lpAddress[0].toLowerCase() === \"0x0000000000000000000000000000000000000000\".toLowerCase()) throw new Error(\"Unregistered pair\")\r\n    return lpAddress[0]\r\n}\r\n\r\nexport const fetchFarm = async (farmConfig) => {\r\n    const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n    const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n            address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n            name: 'balanceOf',\r\n            params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n            address: lpAdress,\r\n            name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'decimals',\r\n        },\r\n    ]\r\n\r\n    const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n    ] = await multicall(erc20, calls)\r\n\r\n    let tokenAmount;\r\n    let lpTotalInQuoteToken;\r\n    let tokenPriceVsQuote;\r\n    if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n            tokenPriceVsQuote = new BigNumber(1);\r\n        } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n    } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(18))\r\n            .times(new BigNumber(2))\r\n            .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n            .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n            tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n    }\r\n\r\n    const [info] = await multicall(masterchefABI, [\r\n        {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [farmConfig.pid],\r\n        }\r\n    ])\r\n    //   const allocPoint = new BigNumber(info.allocPoint._hex)\r\n\r\n    return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        // multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP\r\n    }\r\n}\r\nconst fetchFarms = async () => {\r\n    const data = await Promise.all(\r\n        farmsConfig.map((farmConfig) => fetchFarm(farmConfig)),\r\n    )\r\n    return data\r\n}\r\n\r\nexport const fetchFarmIndex = async (lpAdress) => {\r\n    const calls = [\r\n        {\r\n            address: lpAdress,\r\n            name: 'token0',\r\n        },\r\n        {\r\n            address: lpAdress,\r\n            name: 'token1',\r\n        }\r\n    ]\r\n\r\n    const [\r\n        token0,\r\n        token1\r\n    ] = await multicall(LPAbi, calls);\r\n\r\n    const [\r\n        symbol1,\r\n        symbol2\r\n    ] = await multicall(LPAbi, [\r\n        {\r\n            address: token0[0],\r\n            name: 'symbol',\r\n        },\r\n        {\r\n            address: token1[0],\r\n            name: 'symbol',\r\n        }\r\n    ]);\r\n\r\n    const [lpIndex] = await multicall(masterchefABI, [{\r\n        address: getMasterChefAddress(),\r\n        name: 'lpIndex',\r\n        params: [lpAdress]\r\n    }])\r\n\r\n    if (String(lpIndex) === \"0\" && lpAdress.toLowerCase() !== (\"0xb91Fa8c37D24cbBDfc8670a9aa7c7042DA949276\").toLowerCase()) {\r\n        throw new Error(\"Invalid LP address\");\r\n    }\r\n\r\n    return {\r\n        pid: Number(lpIndex),\r\n        lpSymbol: `${symbol1[0]}-${symbol2[0]} LP`,\r\n        lpAddresses: {\r\n            97: '',\r\n            56: lpAdress\r\n        },\r\n        tokenSymbol: symbol1[0],\r\n        tokenAddresses: {\r\n            97: '',\r\n            56: token0[0]\r\n        },\r\n        quoteTokenSymbol: symbol2[0],\r\n        quoteTokenAdresses: {\r\n            97: '',\r\n            56: token1[0]\r\n        },\r\n    }\r\n}\r\nexport default fetchFarms\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk?: number\r\n  isNative?: boolean\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getFactoryAddress = () => {\r\n  return addresses.factory[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0xe329102DA0E7E135656CD72CDc983c81f27CB5B6',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0x170F5063dB1754a49888D79798B7776Ff20537a2',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  factory: {\r\n    56: '0xfdD9410cE89e43DdBe53E3fECf87535223564759',\r\n    97: '',\r\n  },\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n    {\r\n        pid: 1,\r\n        risk: 5,\r\n        lpSymbol: 'XBT-BNB LP',\r\n        lpAddresses: {\r\n            97: '',\r\n            56: '0x4CEFa7F1B27E414768bb837661332E8603b58791',\r\n        },\r\n        tokenSymbol: 'XBT',\r\n        tokenAddresses: {\r\n            97: '',\r\n            56: '0xe329102DA0E7E135656CD72CDc983c81f27CB5B6',\r\n        },\r\n        quoteTokenSymbol: QuoteToken.BNB,\r\n        quoteTokenAdresses: contracts.wbnb,\r\n        isNative : true\r\n    },\r\n    {\r\n        pid: 2,\r\n        risk: 1,\r\n        lpSymbol: 'XBT-BUSD LP',\r\n        lpAddresses: {\r\n            97: '',\r\n            56: '0x59Ad7323970682B609241Ac3819A6aD05BBC38a2',\r\n        },\r\n        tokenSymbol: 'XBT',\r\n        tokenAddresses: {\r\n            97: '',\r\n            56: '0xe329102DA0E7E135656CD72CDc983c81f27CB5B6',\r\n        },\r\n        quoteTokenSymbol: QuoteToken.BUSD,\r\n        quoteTokenAdresses: contracts.busd,\r\n        isNative : true\r\n    },\r\n    {\r\n        pid: 3,\r\n        risk: 2,\r\n        lpSymbol: 'BUSD-BNB LP',\r\n        lpAddresses: {\r\n            97: '',\r\n            56: '0x0A87708015EAa2a35389867E1b94f3D33173eE72',\r\n        },\r\n        tokenSymbol: QuoteToken.BUSD,\r\n        tokenAddresses: contracts.busd,\r\n        quoteTokenSymbol: QuoteToken.BNB,\r\n        quoteTokenAdresses: contracts.wbnb,\r\n        isNative : true\r\n    }\r\n]\r\n\r\nexport const addFarms = (farm: FarmConfig) => {\r\n    const inExist = farms.findIndex(_farm => _farm.pid === farm.pid);\r\n    if (inExist === -1) {\r\n        if (farms.length === 3)\r\n            farms.push(farm)\r\n        else farms[3] = farm;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default farms\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme { }\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.colors.background};\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider: React.FC = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={dark}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n//   {\r\n//     label: 'Home',\r\n//     icon: 'HomeIcon',\r\n//     href: 'https://babylonswap.finance/',\r\n//   },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://babylonswap.finance/#/swap',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://babylonswap.finance/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farming',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Gaming',\r\n    icon: 'TicketIcon',\r\n    href: 'https://game.babylonswap.finance'\r\n  },\r\n  {\r\n    label: 'Mining bank',\r\n    icon: 'InfoIcon',\r\n    href: 'https://babylonswap.finance/#/MiningBank'\r\n  },\r\n  {\r\n    label: 'Glossary',\r\n    icon: 'AuditIcon',\r\n    href: 'https://babylonswap.gitbook.io/babylonswap/'\r\n  },\r\n  // {\r\n  //   label: 'Roulette',\r\n  //   icon: 'TicketIcon',\r\n  //   href: 'http://localhost:3000/#/Loulette'\r\n  // },\r\n  // {\r\n  //   label: 'Pools',\r\n  //   icon: 'PoolIcon',\r\n  //   href: '/pools',\r\n  // },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  // {\r\n  //   label: 'NFT',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/nft',\r\n  // },\r\n  // {\r\n  //   label: 'Info',\r\n  //   icon: 'InfoIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: 'PancakeSwap',\r\n  //       href: 'https://pancakeswap.info/token/0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\r\n  //     },\r\n  //     {\r\n  //       label: 'CoinGecko',\r\n  //       href: 'https://www.coingecko.com/en/coins/babylon-finance',\r\n  //     },\r\n  //     {\r\n  //       label: 'CoinMarketCap',\r\n  //       href: 'https://coinmarketcap.com/currencies/babylon-finance/',\r\n  //     },\r\n  //     {\r\n  //       label: 'AstroTools',\r\n  //       href: 'https://app.astrotools.io/pancake-pair-explorer/0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\r\n  //     },\r\n  //   ],\r\n  // },\r\n  // {\r\n  //   label: 'More',\r\n  //   icon: 'MoreIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: 'Github',\r\n  //       href: 'https://github.com/goosedefi/',\r\n  //     },\r\n  //     {\r\n  //       label: 'Docs',\r\n  //       href: 'https://goosedefi.gitbook.io/babylon-finance/',\r\n  //     },\r\n  //     {\r\n  //       label: 'Blog',\r\n  //       href: 'https://goosefinance.medium.com/',\r\n  //     },\r\n  //   ],\r\n  // },\r\n  // {\r\n  //   label: 'Partnerships/IFO',\r\n  //   icon: 'GooseIcon',\r\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\r\n  // },\r\n  // {\r\n  //   label: 'Audit by Hacken',\r\n  //   icon: 'AuditIcon',\r\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\r\n  // },\r\n  // {\r\n  //   label: 'Audit by CertiK',\r\n  //   icon: 'AuditIcon',\r\n  //   href: 'https://certik.org/projects/babylon-finance',\r\n  // },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://www.coingecko.com/en/coins/babylon-finance\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n    previewImage: 'swapsies-preview.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n    previewImage: 'drizzle-preview.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n    previewImage: 'blueberries-preview.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n    previewImage: 'circular-preview.png',\r\n    blurImage: 'circular-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n    previewImage: 'sparkle-preview.png',\r\n    blurImage: 'sparkle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst FarmFinder = lazy(() => import('./views/Farms/FarmFinder'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconsole.log = ()=>{}\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/farmfinder\">\r\n              <FarmFinder />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Providers>\r\n            <App />\r\n            <NotificationContainer />\r\n        </Providers>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}